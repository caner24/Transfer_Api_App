// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Transfer.DataAccess.Concrate;
using Transfer.DataAccess.Concrete;

#nullable disable

namespace Transfer.DataAccess.Migrations
{
    [DbContext(typeof(TransferContext))]
    partial class TransferContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Transfer.Entity.PointBase", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CountryCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CountryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Latitude")
                        .HasColumnType("int");

                    b.Property<int>("LongiTude")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable((string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("Transfer.Entity.Vehicle", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Date")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasDefaultValueSql("GETDATE()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaxBaggage")
                        .HasColumnType("int");

                    b.Property<int>("MaxPassenger")
                        .HasColumnType("int");

                    b.Property<Guid>("ProviderId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ReturnDate")
                        .HasColumnType("datetime2");

                    b.Property<double>("TotalPrice")
                        .HasColumnType("float");

                    b.Property<string>("TransferType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Vehicle");
                });

            modelBuilder.Entity("Transfer.Entity.DropOffPoint", b =>
                {
                    b.HasBaseType("Transfer.Entity.PointBase");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("DropOffPoint", (string)null);
                });

            modelBuilder.Entity("Transfer.Entity.PickUpPoint", b =>
                {
                    b.HasBaseType("Transfer.Entity.PointBase");

                    b.Property<Guid>("VehicleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasIndex("VehicleId")
                        .IsUnique()
                        .HasFilter("[VehicleId] IS NOT NULL");

                    b.ToTable("PickUpPoint", (string)null);
                });

            modelBuilder.Entity("Transfer.Entity.Vehicle", b =>
                {
                    b.OwnsOne("Transfer.Entity.ExtraServices", "ExtraServices", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ExtraServiceType")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<double>("TotalPrice")
                                .HasColumnType("float");

                            b1.HasKey("VehicleId");

                            b1.ToTable("ExtraServices");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.OwnsOne("Transfer.Entity.GenericData", "GenericData", b1 =>
                        {
                            b1.Property<Guid>("VehicleId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<string>("ResultKey")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.Property<string>("SearchCode")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)");

                            b1.HasKey("VehicleId");

                            b1.ToTable("GenericData");

                            b1.WithOwner()
                                .HasForeignKey("VehicleId");
                        });

                    b.Navigation("ExtraServices")
                        .IsRequired();

                    b.Navigation("GenericData")
                        .IsRequired();
                });

            modelBuilder.Entity("Transfer.Entity.DropOffPoint", b =>
                {
                    b.HasOne("Transfer.Entity.Vehicle", "Vehicle")
                        .WithOne("DropOffPoint")
                        .HasForeignKey("Transfer.Entity.DropOffPoint", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Transfer.Entity.PickUpPoint", b =>
                {
                    b.HasOne("Transfer.Entity.Vehicle", "Vehicle")
                        .WithOne("PickUpPoint")
                        .HasForeignKey("Transfer.Entity.PickUpPoint", "VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Transfer.Entity.Vehicle", b =>
                {
                    b.Navigation("DropOffPoint")
                        .IsRequired();

                    b.Navigation("PickUpPoint")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
